Certainly! Here are **20 SQL questions** that cover a range of **medium to hard** levels, based on the e-commerce datasets we have created. These questions will test advanced querying, aggregation, and analytical skills using the `product_information`, `customer_information`, `sales_transactions`, and `marketing_campaign` datasets.

## **Medium Level SQL Questions**

1. **Question 1:** Find the top 5 products that generated the highest total sales revenue.
   
   SELECT Product_ID, Product_Name, SUM(Sales_Amount) AS Total_Sales
   FROM sales_transactions
   JOIN product_information ON sales_transactions.Product_ID = product_information.Product_ID
   GROUP BY Product_ID, Product_Name
   ORDER BY Total_Sales DESC
   LIMIT 5;
   ```

2. **Question 2:** Calculate the total sales and average profit for each product category.
   
   SELECT Category, SUM(Sales_Amount) AS Total_Sales, AVG(Profit) AS Average_Profit
   FROM sales_transactions
   JOIN product_information ON sales_transactions.Product_ID = product_information.Product_ID
   GROUP BY Category;
   ```

3. **Question 3:** List the top 3 customers who have made the highest number of purchases.
   
   SELECT Customer_ID, Customer_Name, COUNT(*) AS Number_of_Purchases
   FROM sales_transactions
   JOIN customer_information ON sales_transactions.Customer_ID = customer_information.Customer_ID
   GROUP BY Customer_ID, Customer_Name
   ORDER BY Number_of_Purchases DESC
   LIMIT 3;
   ```

4. **Question 4:** Find the total profit generated by each sales channel.
   
   SELECT Sales_Channel, SUM(Profit) AS Total_Profit
   FROM sales_transactions
   GROUP BY Sales_Channel;
   ```

5. **Question 5:** Retrieve the top 5 products with the highest profit margins, where profit margin is defined as `(Sales_Amount - Cost) / Sales_Amount`.
   
   SELECT p.Product_ID, p.Product_Name, 
          (SUM(s.Sales_Amount) - SUM(p.Cost * s.Quantity)) / SUM(s.Sales_Amount) AS Profit_Margin
   FROM sales_transactions s
   JOIN product_information p ON s.Product_ID = p.Product_ID
   GROUP BY p.Product_ID, p.Product_Name
   ORDER BY Profit_Margin DESC
   LIMIT 5;
   ```

6. **Question 6:** Find the total sales revenue generated by each product category in the year 2022.
   
   SELECT Category, SUM(Sales_Amount) AS Total_Sales_2022
   FROM sales_transactions
   JOIN product_information ON sales_transactions.Product_ID = product_information.Product_ID
   WHERE YEAR(Transaction_Date) = 2022
   GROUP BY Category;
   ```

7. **Question 7:** Identify the customers who have made purchases in all three sales channels: Online, Mobile, and In-Store.
   
   SELECT Customer_ID, Customer_Name
   FROM sales_transactions
   JOIN customer_information ON sales_transactions.Customer_ID = customer_information.Customer_ID
   GROUP BY Customer_ID, Customer_Name
   HAVING COUNT(DISTINCT Sales_Channel) = 3;
   ```

8. **Question 8:** Calculate the average discount given per product category.
   
   SELECT Category, AVG(CAST(REPLACE(Discount, '%', '') AS DECIMAL(5, 2))) AS Average_Discount
   FROM sales_transactions
   JOIN product_information ON sales_transactions.Product_ID = product_information.Product_ID
   GROUP BY Category;
   ```

9. **Question 9:** Find products that have not been sold in the last 6 months.
   
   SELECT p.Product_ID, p.Product_Name
   FROM product_information p
   LEFT JOIN sales_transactions s ON p.Product_ID = s.Product_ID AND s.Transaction_Date >= CURDATE() - INTERVAL 6 MONTH
   WHERE s.Transaction_ID IS NULL;
   ```

10. **Question 10:** Calculate the cumulative sales for each product category month-over-month.
    
    SELECT Category, DATE_FORMAT(Transaction_Date, '%Y-%m') AS Month, 
           SUM(Sales_Amount) AS Monthly_Sales, 
           SUM(SUM(Sales_Amount)) OVER (PARTITION BY Category ORDER BY DATE_FORMAT(Transaction_Date, '%Y-%m')) AS Cumulative_Sales
    FROM sales_transactions
    JOIN product_information ON sales_transactions.Product_ID = product_information.Product_ID
    GROUP BY Category, DATE_FORMAT(Transaction_Date, '%Y-%m');
    ```

### **Hard Level SQL Questions**

11. **Question 11:** Identify the top 3 products that contributed the most to profit in each category, and display the product, category, and total profit.
    
    SELECT Category, Product_Name, Total_Profit
    FROM (
        SELECT p.Category, p.Product_Name, SUM(s.Profit) AS Total_Profit,
               ROW_NUMBER() OVER (PARTITION BY p.Category ORDER BY SUM(s.Profit) DESC) AS Profit_Rank
        FROM sales_transactions s
        JOIN product_information p ON s.Product_ID = p.Product_ID
        GROUP BY p.Category, p.Product_Name
    ) AS RankedProducts
    WHERE Profit_Rank <= 3;
    ```

12. **Question 12:** Find the products that have experienced a sales decline in the past three consecutive months.
    
    SELECT Product_ID, Product_Name
    FROM (
        SELECT Product_ID, Product_Name, Transaction_Date,
               SUM(Sales_Amount) AS Monthly_Sales,
               LAG(SUM(Sales_Amount), 1) OVER (PARTITION BY Product_ID ORDER BY YEAR(Transaction_Date), MONTH(Transaction_Date)) AS Previous_Month_Sales,
               LAG(SUM(Sales_Amount), 2) OVER (PARTITION BY Product_ID ORDER BY YEAR(Transaction_Date), MONTH(Transaction_Date)) AS Two_Months_Ago_Sales
        FROM sales_transactions
        JOIN product_information ON sales_transactions.Product_ID = product_information.Product_ID
        GROUP BY Product_ID, Product_Name, YEAR(Transaction_Date), MONTH(Transaction_Date)
    ) AS MonthlySales
    WHERE Monthly_Sales < Previous_Month_Sales AND Previous_Month_Sales < Two_Months_Ago_Sales;
    ```

13. **Question 13:** Calculate the percentage contribution of each region to the total sales.
    
    SELECT Region, 
           SUM(Sales_Amount) AS Region_Sales, 
           (SUM(Sales_Amount) / (SELECT SUM(Sales_Amount) FROM sales_transactions)) * 100 AS Sales_Percentage
    FROM sales_transactions
    JOIN customer_information ON sales_transactions.Customer_ID = customer_information.Customer_ID
    GROUP BY Region;
    ```

14. **Question 14:** Calculate the average time duration between purchases for each customer.
    
    SELECT Customer_ID, AVG(DATEDIFF(Transaction_Date, LAG(Transaction_Date, 1) OVER (PARTITION BY Customer_ID ORDER BY Transaction_Date))) AS Avg_Time_Between_Purchases
    FROM sales_transactions
    GROUP BY Customer_ID;
    ```

15. **Question 15:** Identify the products that have the highest return on investment (ROI) for each marketing campaign.
    
    SELECT Campaign_Name, Product_Name, MAX(ROI) AS Highest_ROI
    FROM marketing_campaign
    JOIN sales_transactions ON marketing_campaign.Campaign_ID = sales_transactions.Campaign_ID
    JOIN product_information ON sales_transactions.Product_ID = product_information.Product_ID
    GROUP BY Campaign_Name, Product_Name;
    ```

16. **Question 16:** Find customers who have made purchases only in a specific product category (e.g., Electronics) and no other categories.
    
    SELECT Customer_ID, Customer_Name
    FROM (
        SELECT Customer_ID, Customer_Name, COUNT(DISTINCT Category) AS Category_Count,
               MIN(Category) AS Only_Category
        FROM sales_transactions
        JOIN product_information ON sales_transactions.Product_ID = product_information.Product_ID
        JOIN customer_information ON sales_transactions.Customer_ID = customer_information.Customer_ID
        GROUP BY Customer_ID, Customer_Name
    ) AS CustomerCategory
    WHERE Category_Count = 1 AND Only_Category = 'Electronics';
    ```

17. **Question 17:** Find the top 5 customers who have the highest average order value (total sales amount divided by number of orders).
    
    SELECT Customer_ID, Customer_Name, 
           SUM(Sales_Amount) / COUNT(Transaction_ID) AS Average_Order_Value
    FROM sales_transactions
    JOIN customer_information ON sales_transactions.Customer_ID = customer_information.Customer_ID
    GROUP BY Customer_ID, Customer_Name
    ORDER BY Average_Order_Value DESC
    LIMIT 5;
    ```

18. **Question 18:** Identify products that have been part of multiple marketing campaigns and show the number of campaigns they were part of.
    
    SELECT Product_ID, Product_Name, COUNT(DISTINCT Campaign_ID) AS Campaign_Count
    FROM sales_transactions
    JOIN product_information ON sales_transactions.Product_ID = product_information.Product_ID
    WHERE Campaign_ID IS NOT NULL
    GROUP BY Product_ID, Product_Name
    HAVING Campaign_Count > 1;
    ```

19. **Question 19:** Find customers who have spent more than $1,000 in total but have not made any purchases in the last 3 months.
    
    SELECT Customer_ID, Customer_Name, SUM(Sales_Amount) AS Total_Spent
    FROM sales_transactions
    JOIN customer_information ON sales_transactions.Customer_ID = customer_information.Customer_ID
    GROUP BY Customer_ID, Customer_Name
    HAVING Total_Spent > 1000
    AND MAX(Transaction_Date) < CURDATE() - INTERVAL 3 MONTH;
    ``

`

20. **Question 20:** Calculate the number of unique products purchased by each customer and find customers who have purchased more than 10 unique products.
    
    SELECT Customer_ID, Customer_Name, COUNT(DISTINCT Product_ID) AS Unique_Products_Purchased
    FROM sales_transactions
    JOIN customer_information ON sales_transactions.Customer_ID = customer_information.Customer_ID
    GROUP BY Customer_ID, Customer_Name
    HAVING Unique_Products_Purchased > 10;
